/*
 * Copyright 2019 Scott Logic Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id "java"
    id "de.gliderpilot.semantic-release" version "1.4.0"
}

group "com.scottlogic.deg"

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compile project(":profile")
    compile project(":generator")
    compile project(":output")
    compile project(":common")

    compile group: "info.picocli", name: "picocli", version: "${PICOCLI_VERSION}"
    compile group: "com.google.code.gson", name: "gson", version: "${GSON_VERSION}"

    testCompile "org.hamcrest:java-hamcrest:${HAMCREAST_VERSION}"
    testCompile "org.junit.jupiter:junit-jupiter-api:${JUNIT_JUPITER_VERSION}"
    testCompile "org.junit.platform:junit-platform-runner:${JUNIT_PLATFORM_RUNNER_VERSION}"
    testCompile "org.junit.vintage:junit-vintage-engine:${JUNIT_JUPITER_VERSION}"
    testCompile "org.junit.jupiter:junit-jupiter-params:${JUNIT_JUPITER_VERSION}"
    testCompile "io.cucumber:cucumber-core:${CUCUMBER_VERSION}"
    testCompile "io.cucumber:cucumber-junit:${CUCUMBER_VERSION}"
    testCompile "io.cucumber:cucumber-java:${CUCUMBER_VERSION}"
    testCompile "io.cucumber:cucumber-jvm:${CUCUMBER_VERSION}"
    testCompile "io.cucumber:gherkin:${GHERKIN_VERSION}"
    testCompile "io.cucumber:cucumber-expressions:${CUCUMBER_EXPRESSIONS_VERSION}"
    testCompile "info.cukes:cucumber-picocontainer:${CUCUMBER_PICOCONTAINER_VERSION}"
    testCompile "org.mockito:mockito-all:${MOCKITO_VERSION}"
    testCompile "com.shazam:shazamcrest:${SHAZAMCREAST_VERSION}"
    testCompile "org.junit.jupiter:junit-jupiter-engine:${JUNIT_JUPITER_VERSION}"
    testCompile group: "junit", name: "junit", version: "${JUNIT_4_VERSION}"
    
    testCompile project(':generator').sourceSets.test.output

    testImplementation("org.junit.jupiter:junit-jupiter:${JUNIT_JUPITER_VERSION}")
}

test {
    useJUnitPlatform()
    dependsOn("fatJar")
}

description = "DataHelix Generator"

task fatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'com.scottlogic.deg.orchestrator.App'
    }
    baseName = 'generator'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
    archiveName = "${baseName}.${extension}"
}

jar {
    manifest {
        attributes 'Main-Class': 'com.scottlogic.deg.orchestrator.App'
    }
}

project.ext.ghToken = project.hasProperty('ghToken') ? project.getProperty('ghToken') : System.getenv('GH_TOKEN') ?: null

semanticRelease {
    repo {
        ghToken = project.ghToken
        releaseAsset fatJar
    }
}